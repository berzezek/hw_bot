import sqlite3
from datetime import datetime, timedelta

class Database:
    def __init__(self, db_path="bot.db"):
        self.db_path = db_path
        self.init_db()
    
    def _get_connection(self):
        return sqlite3.connect(self.db_path)
    
    def init_db(self):
        conn = self._get_connection()
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–µ—Ç–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª–∏)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                role TEXT,
                child_name TEXT,
                stars INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π (–¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sessions (
                telegram_user_id INTEGER PRIMARY KEY,
                current_child_name TEXT,
                last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tasks (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                child_name TEXT,
                task_text TEXT,
                stars_reward INTEGER,
                is_completed BOOLEAN DEFAULT FALSE,
                is_weekly BOOLEAN DEFAULT FALSE,
                completed_by INTEGER,
                completed_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS prizes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                prize_text TEXT,
                stars_cost INTEGER,
                is_available BOOLEAN DEFAULT TRUE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ–±–º–µ–Ω–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS exchanges (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                prize_id INTEGER,
                stars_spent INTEGER,
                exchanged_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            cursor.execute("ALTER TABLE users ADD COLUMN last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        conn.commit()
        conn.close()
    
    def cleanup_inactive_users(self, hours=24):
        """–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã sessions"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–∏, –Ω–µ —Å–∞–º–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute(
            'DELETE FROM sessions WHERE last_active < datetime("now", ?)',
            (f"-{hours} hours",)
        )
        deleted_count = cursor.rowcount
        
        conn.commit()
        conn.close()
        return deleted_count
    
    def update_user_activity(self, user_id):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE user_id = ?',
            (user_id,)
        )
        conn.commit()
        conn.close()
    
    def update_session_activity(self, telegram_user_id):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(
            'UPDATE sessions SET last_active = CURRENT_TIMESTAMP WHERE telegram_user_id = ?',
            (telegram_user_id,)
        )
        conn.commit()
        conn.close()
    
    # –°–ï–°–°–ò–ò –ò –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    def set_current_child(self, telegram_user_id, child_name):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT OR REPLACE INTO sessions (telegram_user_id, current_child_name, last_active) VALUES (?, ?, CURRENT_TIMESTAMP)',
            (telegram_user_id, child_name)
        )
        conn.commit()
        conn.close()
    
    def get_current_child(self, telegram_user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT current_child_name FROM sessions WHERE telegram_user_id = ?', (telegram_user_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else None
    
    def get_available_children(self, telegram_user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –¥–µ—Ç–µ–π, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π –∏–∑ —Å–µ—Å—Å–∏–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('''
            SELECT DISTINCT current_child_name 
            FROM sessions 
            WHERE telegram_user_id = ? AND current_child_name != 'parent'
        ''', (telegram_user_id,))
        
        children = [row[0] for row in cursor.fetchall() if row[0]]
        conn.close()
        return children
    
    def add_user(self, user_id, username, role, child_name=None):
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT OR REPLACE INTO users (user_id, username, role, child_name, stars, last_active) VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)',
            (user_id, username, role, child_name, 0)
        )
        conn.commit()
        conn.close()
    
    def get_user_by_child_name(self, child_name):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE child_name = ? AND role = "child"', (child_name,))
        user = cursor.fetchone()
        conn.close()
        return user
    
    def get_user(self, user_id):
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        conn.close()
        return user
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def add_task(self, child_name, task_text, stars_reward, is_weekly=False):
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO tasks (child_name, task_text, stars_reward, is_weekly) VALUES (?, ?, ?, ?)',
            (child_name, task_text, stars_reward, is_weekly)
        )
        conn.commit()
        conn.close()
    
    def get_tasks(self, child_name=None, completed=False, weekly_only=False):
        conn = self._get_connection()
        cursor = conn.cursor()
        
        query = 'SELECT * FROM tasks WHERE is_completed = ?'
        params = [completed]
        
        if child_name:
            query += ' AND child_name = ?'
            params.append(child_name)
        
        if weekly_only:
            query += ' AND is_weekly = TRUE'
        
        query += ' ORDER BY created_at DESC'
        
        cursor.execute(query, params)
        tasks = cursor.fetchall()
        conn.close()
        return tasks
    
    def get_child_stars(self, child_name):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT stars FROM users WHERE child_name = ? AND role = "child"', (child_name,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else 0

    def get_child_user_id(self, child_name):
        """–ü–æ–ª—É—á–∏—Ç—å user_id —Ä–µ–±–µ–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT user_id FROM users WHERE child_name = ? AND role = "child"', (child_name,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else None

    def complete_task(self, task_id, child_name_or_id):
        """–ü–æ–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã —Ä–µ–±–µ–Ω–∫—É"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞
            if isinstance(child_name_or_id, int) or child_name_or_id.isdigit():
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ (Telegram ID), –ø–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ —Å–µ—Å—Å–∏–∏
                telegram_id = int(child_name_or_id)
                child_name = self.get_current_child(telegram_id)
                if not child_name:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–±–µ–Ω–æ–∫ –¥–ª—è Telegram ID {telegram_id}")
                    return 0
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                child_name = child_name_or_id
            
            print(f"üéØ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–¥–∞–Ω–∏–µ {task_id} –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ '{child_name}'")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            cursor.execute('SELECT stars_reward, is_completed FROM tasks WHERE id = ?', (task_id,))
            result = cursor.fetchone()
            
            if not result:
                print(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return 0
            
            stars_reward, is_completed = result
            
            if is_completed:
                print(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                return 0
            
            print(f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ: {stars_reward} –∑–≤–µ–∑–¥")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–≤–µ–∑–¥—ã —Ä–µ–±–µ–Ω–∫–∞
            current_stars = self.get_child_stars(child_name)
            print(f"üí∞ –¢–µ–∫—É—â–∏–µ –∑–≤–µ–∑–¥—ã {child_name}: {current_stars}")
            
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º
            cursor.execute(
                'UPDATE tasks SET is_completed = TRUE, completed_at = CURRENT_TIMESTAMP WHERE id = ?',
                (task_id,)
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã
            new_stars = current_stars + stars_reward
            print(f"üí∞ –ù–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã {child_name}: {new_stars}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã —Ä–µ–±–µ–Ω–∫–∞
            user_id = self.get_child_user_id(child_name)
            if user_id:
                cursor.execute('UPDATE users SET stars = ?, last_active = CURRENT_TIMESTAMP WHERE user_id = ?', 
                            (new_stars, user_id))
                print(f"‚úÖ –ó–≤–µ–∑–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è {child_name} (user_id: {user_id})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
                cursor.execute('SELECT stars FROM users WHERE user_id = ?', (user_id,))
                updated_stars = cursor.fetchone()[0]
                print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤ –±–∞–∑–µ —Ç–µ–ø–µ—Ä—å {updated_stars} –∑–≤–µ–∑–¥")
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                new_user_id = hash(f"auto_{child_name}") % 1000000000
                cursor.execute(
                    'INSERT INTO users (user_id, username, role, child_name, stars) VALUES (?, ?, ?, ?, ?)',
                    (new_user_id, f"auto_{child_name}", "child", child_name, new_stars)
                )
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è {child_name}")
            
            conn.commit()
            print(f"üéâ –ó–∞–¥–∞–Ω–∏–µ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–∞—á–∏—Å–ª–µ–Ω–æ {stars_reward} –∑–≤–µ–∑–¥ –¥–ª—è {child_name}")
            return stars_reward
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            conn.rollback()
            return 0
        finally:
            conn.close()
    
    def delete_weekly_tasks(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM tasks WHERE is_weekly = TRUE')
        conn.commit()
        conn.close()
    
    def add_prize(self, prize_text, stars_cost):
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO prizes (prize_text, stars_cost) VALUES (?, ?)',
            (prize_text, stars_cost)
        )
        conn.commit()
        conn.close()
    
    def get_prizes(self):
        conn = self._get_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM prizes WHERE is_available = TRUE ORDER BY stars_cost')
        prizes = cursor.fetchall()
        conn.close()
        return prizes
    
    def exchange_stars(self, user_id, prize_id):
        """–û–±–º–µ–Ω—è—Ç—å –∑–≤–µ–∑–¥—ã –Ω–∞ –ø—Ä–∏–∑"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–µ
            cursor.execute('SELECT prize_text, stars_cost, is_available FROM prizes WHERE id = ?', (prize_id,))
            prize_result = cursor.fetchone()
            
            if not prize_result:
                print(f"‚ùå –ü—Ä–∏–∑ {prize_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            prize_text, prize_cost, is_available = prize_result
            
            if not is_available:
                print(f"‚ùå –ü—Ä–∏–∑ {prize_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute('SELECT stars, child_name FROM users WHERE user_id = ?', (user_id,))
            user_result = cursor.fetchone()
            
            if not user_result:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            user_stars, child_name = user_result
            
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–º–µ–Ω–∞: {child_name} ({user_stars}‚≠ê) -> {prize_text} ({prize_cost}‚≠ê)")
            
            if user_stars < prize_cost:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥: {user_stars} < {prize_cost}")
                return False
            
            if user_stars - prize_cost < 0:
                print(f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞: {user_stars} - {prize_cost}")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
            new_balance = user_stars - prize_cost
            
            # –°–ø–∏—Å–∞–Ω–∏–µ –∑–≤–µ–∑–¥
            cursor.execute(
                'UPDATE users SET stars = ? WHERE user_id = ?',
                (new_balance, user_id)
            )
            
            # –ó–∞–ø–∏—Å—å –æ–±–º–µ–Ω–∞
            cursor.execute(
                'INSERT INTO exchanges (user_id, prize_id, stars_spent) VALUES (?, ?, ?)',
                (user_id, prize_id, prize_cost)
            )
            
            conn.commit()
            print(f"‚úÖ –û–±–º–µ–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! {child_name} –ø–æ–ª—É—á–∏–ª {prize_text}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚≠ê")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∑–≤–µ–∑–¥: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()

    def cash_out_stars(self, child_name):
        """–û–±–Ω—É–ª–∏—Ç—å –∑–≤–µ–∑–¥—ã —Ä–µ–±–µ–Ω–∫–∞ (—Ä–æ–¥–∏—Ç–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–ª—Å—è)"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
            current_stars = self.get_child_stars(child_name)
            
            if current_stars == 0:
                print(f"‚ÑπÔ∏è –£ {child_name} –∏ —Ç–∞–∫ 0 –∑–≤–µ–∑–¥")
                return 0
            
            # –ü–æ–ª—É—á–∞–µ–º user_id —Ä–µ–±–µ–Ω–∫–∞
            user_id = self.get_child_user_id(child_name)
            if not user_id:
                print(f"‚ùå –†–µ–±–µ–Ω–æ–∫ {child_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return 0
            
            # –û–±–Ω—É–ª—è–µ–º –∑–≤–µ–∑–¥—ã
            cursor.execute(
                'UPDATE users SET stars = 0 WHERE user_id = ?',
                (user_id,)
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Ç–∞–±–ª–∏—Ü—É exchanges —Å prize_id = 0 (–æ—Å–æ–±–∞—è –º–µ—Ç–∫–∞)
            cursor.execute(
                'INSERT INTO exchanges (user_id, prize_id, stars_spent) VALUES (?, ?, ?)',
                (user_id, 0, current_stars)  # prize_id = 0 –æ–∑–Ω–∞—á–∞–µ—Ç "–æ–±–Ω–∞–ª–∏—á–∫–∞"
            )
            
            conn.commit()
            print(f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–ª—Å—è —Å {child_name}! –û–±–Ω—É–ª–µ–Ω–æ {current_stars} –∑–≤–µ–∑–¥")
            return current_stars
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ –∑–≤–µ–∑–¥: {e}")
            conn.rollback()
            return 0
        finally:
            conn.close()

    def get_cash_out_history(self, child_name=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è —Å –¥–µ—Ç—å–º–∏"""
        conn = self._get_connection()
        cursor = conn.cursor()
        
        if child_name:
            # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
            cursor.execute('''
                SELECT e.exchanged_at, e.stars_spent, u.child_name 
                FROM exchanges e
                JOIN users u ON e.user_id = u.user_id
                WHERE e.prize_id = 0 AND u.child_name = ?
                ORDER BY e.exchanged_at DESC
            ''', (child_name,))
        else:
            # –í—Å—è –∏—Å—Ç–æ—Ä–∏—è
            cursor.execute('''
                SELECT e.exchanged_at, e.stars_spent, u.child_name 
                FROM exchanges e
                JOIN users u ON e.user_id = u.user_id
                WHERE e.prize_id = 0
                ORDER BY e.exchanged_at DESC
            ''')
        
        history = cursor.fetchall()
        conn.close()
        return history