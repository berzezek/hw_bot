from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database
from keyboards import get_main_parent_keyboard, get_child_selection_keyboard, get_admin_users_keyboard, get_parent_cash_out_keyboard, get_children_cash_out_keyboard, get_cash_out_confirmation_keyboard
from utils.task_scheduler import update_weekly_tasks
from .common import send_parent_menu

router = Router()
db = Database()

class ParentState(StatesGroup):
    waiting_for_child_name = State()
    waiting_for_task = State()
    waiting_for_stars = State()
    waiting_for_prize = State()
    waiting_for_prize_cost = State()
    waiting_for_cash_out_selection = State()

@router.message(lambda message: message.text == "üë∂ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def cmd_add_task(message: types.Message, state: FSMContext):
    await message.answer("üë∂ –î–ª—è –∫–æ–≥–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ?", reply_markup=get_child_selection_keyboard())
    await state.set_state(ParentState.waiting_for_child_name)

@router.message(ParentState.waiting_for_child_name)
async def process_child_name(message: types.Message, state: FSMContext):
    child_name = message.text.lower().strip()
    if child_name == "all":
        await message.answer("‚ùå –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return
    await state.update_data(child_name=child_name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(ParentState.waiting_for_task)

@router.message(ParentState.waiting_for_task)
async def process_task_text(message: types.Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    await message.answer("‚≠ê –°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –¥–∞—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ?")
    await state.set_state(ParentState.waiting_for_stars)

@router.message(ParentState.waiting_for_stars)
async def process_task_stars(message: types.Message, state: FSMContext):
    try:
        stars = int(message.text)
        data = await state.get_data()
        
        db.add_task(data['child_name'], data['task_text'], stars)
        
        await message.answer(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è {data['child_name'].capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω–æ!", 
                           reply_markup=get_main_parent_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.message(lambda message: message.text == "üéÅ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑")
async def cmd_add_prize(message: types.Message, state: FSMContext):
    await message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–∞:")
    await state.set_state(ParentState.waiting_for_prize)

@router.message(ParentState.waiting_for_prize)
async def process_prize_text(message: types.Message, state: FSMContext):
    await state.update_data(prize_text=message.text)
    await message.answer("‚≠ê –°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–µ–Ω —Å—Ç–æ–∏—Ç—å –ø—Ä–∏–∑?")
    await state.set_state(ParentState.waiting_for_prize_cost)

@router.message(ParentState.waiting_for_prize_cost)
async def process_prize_cost(message: types.Message, state: FSMContext):
    try:
        cost = int(message.text)
        data = await state.get_data()
        
        db.add_prize(data['prize_text'], cost)
        
        await message.answer("‚úÖ –ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_main_parent_keyboard())
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@router.message(lambda message: message.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_statistics(message: types.Message):
    import sqlite3
    from datetime import datetime, timedelta
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –∑–∞–¥–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ—Ç–µ–π
    cursor.execute("""
        SELECT 
            t.child_name,
            t.task_text,
            t.stars_reward,
            t.completed_at,
            u.stars as current_stars
        FROM tasks t
        LEFT JOIN users u ON u.child_name = t.child_name AND u.role = 'child'
        WHERE t.is_completed = TRUE
        ORDER BY t.completed_at DESC
    """)
    
    completed_tasks = cursor.fetchall()
    
    stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</b>\n\n"
    
    if not completed_tasks:
        stats_text += "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n"
        conn.close()
        await message.answer(stats_text, parse_mode="HTML")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ –¥–µ—Ç—è–º
    tasks_by_child = {}
    for task in completed_tasks:
        child_name, task_text, stars_reward, completed_at, current_stars = task
        
        if child_name not in tasks_by_child:
            tasks_by_child[child_name] = {
                'tasks': [],
                'total_earned': 0,
                'current_stars': current_stars or 0
            }
        
        tasks_by_child[child_name]['tasks'].append({
            'text': task_text,
            'stars': stars_reward,
            'completed_at': completed_at
        })
        tasks_by_child[child_name]['total_earned'] += stars_reward
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–±–µ–Ω–∫—É
    for child_name, data in tasks_by_child.items():
        total_completed = len(data['tasks'])
        total_earned = data['total_earned']
        current_stars = data['current_stars']
        
        stats_text += f"üë§ <b>{child_name.capitalize()}</b>\n"
        stats_text += f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <b>{total_completed}</b>\n"
        stats_text += f"   üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–≤–µ–∑–¥: <b>{total_earned}</b>\n"
        stats_text += f"   ‚≠ê –ó–≤–µ–∑–¥ —Å–µ–π—á–∞—Å: <b>{current_stars}</b>\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 5)
        recent_tasks = data['tasks'][:5]
        stats_text += "   <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n"
        
        for i, task in enumerate(recent_tasks, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            completed_date = ""
            if task['completed_at']:
                try:
                    dt = datetime.fromisoformat(task['completed_at'].replace('Z', '+00:00'))
                    completed_date = dt.strftime(" (%d.%m)")
                except:
                    completed_date = ""
            
            stats_text += f"   {i}. {task['text']} <b>+{task['stars']}‚≠ê</b>{completed_date}\n"
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –±–æ–ª—å—à–µ 5, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—â–µ
        if len(data['tasks']) > 5:
            stats_text += f"   ... –∏ –µ—â–µ <b>{len(data['tasks']) - 5}</b> –∑–∞–¥–∞–Ω–∏–π\n"
        
        stats_text += "\n"
    
    # –û–±—â–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE is_completed = TRUE")
    total_completed_all = cursor.fetchone()[0]
    
    cursor.execute("SELECT SUM(stars_reward) FROM tasks WHERE is_completed = TRUE")
    total_earned_all = cursor.fetchone()[0] or 0
    
    cursor.execute("SELECT SUM(stars) FROM users WHERE role = 'child'")
    total_stars_now = cursor.fetchone()[0] or 0
    
    stats_text += "üèÜ <b>–û–±—â–∞—è —Å–≤–æ–¥–∫–∞:</b>\n"
    stats_text += f"   üìà –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{total_completed_all}</b> –∑–∞–¥–∞–Ω–∏–π\n"
    stats_text += f"   üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_earned_all}</b> –∑–≤–µ–∑–¥\n"
    stats_text += f"   ‚≠ê –ù–∞ —Ä—É–∫–∞—Ö —É –¥–µ—Ç–µ–π: <b>{total_stars_now}</b> –∑–≤–µ–∑–¥\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute("""
        SELECT COUNT(*), COALESCE(SUM(stars_reward), 0) 
        FROM tasks 
        WHERE is_completed = TRUE AND completed_at > ?
    """, (week_ago,))
    
    weekly_stats = cursor.fetchone()
    weekly_completed = weekly_stats[0] or 0
    weekly_earned = weekly_stats[1] or 0
    
    stats_text += f"   üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: <b>{weekly_completed}</b> –∑–∞–¥–∞–Ω–∏–π, <b>{weekly_earned}</b> –∑–≤–µ–∑–¥\n"
    
    conn.close()
    
    await message.answer(stats_text, parse_mode="HTML")

@router.message(lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def cmd_refresh_weekly_tasks(message: types.Message):
    await update_weekly_tasks()
    await message.answer("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_main_parent_keyboard())

@router.callback_query(lambda c: c.data == "refresh_users")
async def refresh_users_list(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    users = db.get_all_users()
    
    if not users:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    users_text = "üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user in users:
        user_id, username, role, child_name, stars, created_at, last_active = user
        role_emoji = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" if role == 'parent' else 'üë§'
        name = child_name.capitalize() if child_name else "–†–æ–¥–∏—Ç–µ–ª—å"
        users_text += f"{role_emoji} {name}: {stars}‚≠ê\n"
    
    await callback.message.edit_text(users_text, reply_markup=get_admin_users_keyboard())
    await callback.answer("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!")

@router.callback_query(lambda c: c.data == "cleanup_users")
async def cleanup_inactive_users(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    deleted_count = db.cleanup_inactive_users()
    await callback.message.edit_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await callback.answer()

@router.message(lambda message: message.text == "üíµ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å—Å—è —Å —Ä–µ–±–µ–Ω–∫–æ–º")
async def cmd_cash_out_menu(message: types.Message):
    """–ú–µ–Ω—é —Ä–∞—Å—á–µ—Ç–∞ —Å –¥–µ—Ç—å–º–∏"""
    await message.answer(
        "üíµ <b>–†–∞—Å—á–µ—Ç —Å –¥–µ—Ç—å–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_parent_cash_out_keyboard(),
        parse_mode="HTML"
    )

@router.message(lambda message: message.text == "üíµ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å—Å—è —Å —Ä–µ–±–µ–Ω–∫–æ–º")
async def cmd_cash_out_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—á–µ—Ç–∞ —Å —Ä–µ–±–µ–Ω–∫–æ–º"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–µ–π —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∑–≤–µ–∑–¥—ã
    import sqlite3
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT child_name, stars 
        FROM users 
        WHERE role = 'child' AND stars > 0 
        ORDER BY stars DESC
    ''')
    
    children_with_stars = cursor.fetchall()
    conn.close()
    
    if not children_with_stars:
        await message.answer(
            "üí∞ <b>–ù–µ—Ç –¥–µ—Ç–µ–π —Å –∑–≤–µ–∑–¥–∞–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞</b>\n\n"
            "–í—Å–µ –¥–µ—Ç–∏ —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã! üéâ",
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π
    children_text = "üë• <b>–î–µ—Ç–∏ —Å –∑–≤–µ–∑–¥–∞–º–∏:</b>\n\n"
    for child_name, stars in children_with_stars:
        children_text += f"üë§ {child_name.capitalize()}: <b>{stars}‚≠ê</b>\n"
    
    children_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:"
    
    children_names = [child[0] for child in children_with_stars]
    
    await message.answer(
        children_text,
        reply_markup=get_children_cash_out_keyboard(children_names),
        parse_mode="HTML"
    )
    await state.set_state(ParentState.waiting_for_cash_out_selection)

@router.message(ParentState.waiting_for_cash_out_selection)
async def process_cash_out_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"""
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await send_parent_menu(message)
        await state.clear()
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    child_name = message.text.replace("üíµ ", "").strip().lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–≤–µ–∑–¥—ã —Ä–µ–±–µ–Ω–∫–∞
    current_stars = db.get_child_stars(child_name)
    
    if current_stars == 0:
        await message.answer(
            f"‚ùå –£ {child_name.capitalize()} —É–∂–µ 0 –∑–≤–µ–∑–¥!",
            reply_markup=get_parent_cash_out_keyboard()
        )
        await state.clear()
        return
    
    await message.answer(
        f"üíµ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞</b>\n\n"
        f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{child_name.capitalize()}</b>\n"
        f"‚≠ê –¢–µ–∫—É—â–∏–µ –∑–≤–µ–∑–¥—ã: <b>{current_stars}</b>\n\n"
        f"–ü–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ –∑–≤–µ–∑–¥—ã –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–µ–±–µ–Ω–∫—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ üí∞",
        reply_markup=get_cash_out_confirmation_keyboard(child_name, current_stars),
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(lambda c: c.data.startswith('confirm_cashout:'))
async def process_cash_out_confirmation(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å —Ä–µ–±–µ–Ω–∫–æ–º"""
    child_name = callback.data.split(":")[1]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    cashed_out_stars = db.cash_out_stars(child_name)
    
    if cashed_out_stars > 0:
        await callback.message.edit_text(
            f"üéâ <b>–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            f"üë§ –†–µ–±–µ–Ω–æ–∫: <b>{child_name.capitalize()}</b>\n"
            f"üí´ –û–±–Ω—É–ª–µ–Ω–æ –∑–≤–µ–∑–¥: <b>{cashed_out_stars}‚≠ê</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–µ–±–µ–Ω–∫—É –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ! üí∞",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç</b>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, —É {child_name.capitalize()} —É–∂–µ 0 –∑–≤–µ–∑–¥.",
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(lambda c: c.data == "cancel_cashout")
async def process_cash_out_cancel(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—á–µ—Ç–∞"""
    await callback.message.edit_text(
        "‚ùå <b>–†–∞—Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω</b>",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(lambda message: message.text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤")
async def cmd_cash_out_history(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤"""
    history = db.get_cash_out_history()
    
    if not history:
        await message.answer(
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤</b>\n\n"
            "–†–∞—Å—á–µ—Ç–æ–≤ —Å –¥–µ—Ç—å–º–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ.",
            parse_mode="HTML"
        )
        return
    
    history_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å –¥–µ—Ç—å–º–∏</b>\n\n"
    
    total_cashed_out = 0
    for record in history:
        exchanged_at, stars_spent, child_name = record
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        from datetime import datetime
        try:
            dt = datetime.fromisoformat(exchanged_at.replace('Z', '+00:00'))
            date_str = dt.strftime("%d.%m.%Y %H:%M")
        except:
            date_str = exchanged_at
        
        history_text += f"üë§ {child_name.capitalize()}: <b>{stars_spent}‚≠ê</b>\n"
        history_text += f"üìÖ {date_str}\n\n"
        
        total_cashed_out += stars_spent
    
    history_text += f"üí´ <b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: {total_cashed_out}‚≠ê</b>"
    
    await message.answer(history_text, parse_mode="HTML")