from aiogram import Router, types
from database import Database
from keyboards import get_main_child_keyboard, get_tasks_keyboard, get_children_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

db = Database()

# –ó–ê–î–ê–ù–ò–Ø
@router.message(lambda message: message.text == "üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è")
async def cmd_my_tasks(message: types.Message):
    current_child = db.get_current_user(message.from_user.id)
    if not current_child:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ —Å—ã–Ω–æ—á–∫–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    tasks = db.get_tasks(current_child, completed=False)
    
    if not tasks:
        await message.answer("üìù –ù–µ—Ç üéØ!")
        return
    
    text = f"üìã <b>–ó–∞–¥–∞–Ω–∏—è –¥–ª—è {current_child.capitalize()}</b>\n\n"
    # for task in tasks:
    #     task_id, child_name, task_text, stars_reward, is_completed, is_weekly, completed_at, created_at = task
    #     emoji = "üîÑ " if is_weekly else ""
    #     text += f"{emoji}{task_text} <b>(+{stars_reward}‚≠ê)</b>\n"
    
    await message.answer(text, reply_markup=get_tasks_keyboard(tasks), parse_mode="HTML")

# –ó–í–ï–ó–î–´
@router.message(lambda message: message.text == "‚≠ê –ú–æ–∏ –∑–≤–µ–∑–¥—ã")
async def cmd_my_stars(message: types.Message):
    current_child = db.get_current_user(message.from_user.id)
    if not current_child or current_child == "parent":
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ —Å—ã–Ω–æ—á–∫–∞ —á–µ—Ä–µ–∑ /start")
        return
    
    stars = db.get_child_stars(current_child)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
    pending_reward_tasks = db.get_pending_reward_tasks(current_child)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    import sqlite3
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    
    # –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE child_name = ? AND is_completed = TRUE", (current_child,))
    total_completed = cursor.fetchone()[0]
    
    # –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE child_name = ? AND is_completed = FALSE", (current_child,))
    pending_tasks = cursor.fetchone()[0]
    
    conn.close()
    
    text = f"‚≠ê <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {current_child.capitalize()}</b>\n\n"
    
    # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    text += f"üí∞ <b>–¢–µ–∫—É—â–∏–µ –∑–≤–µ–∑–¥—ã:</b> {stars}‚≠ê\n\n"
    
    # –ó–∞–¥–∞–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    if pending_reward_tasks:
        text += f"‚úÖ <b>–û–∂–∏–¥–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã:</b> {len(pending_reward_tasks)} üéØ\n"
        
        total_pending_stars = sum(task[3] for task in pending_reward_tasks)
        text += f"üí´ <b>–ë—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã:</b> {total_pending_stars}‚≠ê\n\n"
        
        text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n"
        for i, task in enumerate(pending_reward_tasks[:5], 1):
            task_id, child_name, task_text, stars_reward, is_completed, is_weekly, completed_at, created_at = task
            emoji = "üîÑ " if is_weekly else ""
            text += f"   {i}. {emoji}{task_text} <b>(+{stars_reward}‚≠ê)</b>\n"
        
        if len(pending_reward_tasks) > 5:
            text += f"   ... –∏ –µ—â–µ {len(pending_reward_tasks) - 5}\n"
        
        text += "\n"
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    text += f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: {total_completed} üéØ\n"
    text += f"   üìù –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {pending_tasks} üéØ\n"
    
    if pending_reward_tasks:
        text += f"   üéÅ –û–∂–∏–¥–∞—é—Ç üèÜ: {len(pending_reward_tasks)} üéØ\n"
    
    # –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text += "\n"
    if stars == 0 and not pending_reward_tasks:
        text += "–í—ã–ø–æ–ª–Ω—è–π üéØ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π ‚≠ê –ü–æ–ª—É—á–∞–π üèÜ"
    elif stars > 0:
        text += f"üí´ –£ —Ç–µ–±—è {stars} ‚≠ê - –ñ–¥–∏ üèÜ!"
    elif pending_reward_tasks:
        text += f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(pending_reward_tasks)} üéØ - –∂–¥–∏ üèÜ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏"
    
    await message.answer(text, parse_mode="HTML")

# –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ù–ò–ô
@router.callback_query(lambda c: c.data.startswith('complete:'))
async def process_task_completion(callback: types.CallbackQuery):
    current_child = db.get_current_user(callback.from_user.id)
    if not current_child:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ —Å—ã–Ω–æ—á–∫–∞")
        return
    
    task_id = int(callback.data.split(":")[1])
    earned_stars = db.complete_task(task_id, current_child)
    
    if earned_stars > 0:
        current_stars = db.get_child_stars(current_child)
        await callback.message.edit_text(
            f"üéâ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
            f"üí´ –ü–æ–ª—É—á–µ–Ω–æ: {earned_stars}‚≠ê\n"
            f"üí∞ –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è: {current_stars}‚≠ê"
        )
    else:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
    
    await callback.answer()

# –°–ú–ï–ù–ê –†–ï–ë–ï–ù–ö–ê
@router.message(lambda message: message.text == "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–±–µ–Ω–∫–∞")
async def cmd_switch_child(message: types.Message):
    children = db.get_all_children()
    if len(children) <= 1:
        await message.answer("‚ùå –ù–µ—Ç –¥—Ä—É–≥–∏—Ö –¥–µ—Ç–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")
        return
    
    await message.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞:", reply_markup=get_children_keyboard(children))

@router.message(lambda message: message.text in [child.capitalize() for child in db.get_all_children()])
async def process_switch_child(message: types.Message):
    child_name = message.text.lower()
    db.set_current_child(message.from_user.id, child_name)
    stars = db.get_child_stars(child_name)
    
    await message.answer(
        f"‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã {child_name.capitalize()}!\n‚≠ê –ó–≤–µ–∑–¥—ã: {stars}",
        reply_markup=get_main_child_keyboard()
    )

# –í–´–•–û–î
@router.message(lambda message: message.text == "üö™ –í—ã—Ö–æ–¥")
async def cmd_logout(message: types.Message):
    db.set_current_child(message.from_user.id, None)
    await message.answer("üëã –í—ã –≤—ã—à–ª–∏!", reply_markup=types.ReplyKeyboardRemove())