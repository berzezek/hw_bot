from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import Database
import config
from keyboards import get_main_child_keyboard, get_main_parent_keyboard, get_logout_keyboard, get_children_selection_keyboard

router = Router()
db = Database()

class LoginState(StatesGroup):
    waiting_for_password = State()
    waiting_for_child_selection = State()

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_child = db.get_current_child(message.from_user.id)
    
    if current_child:
        # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–±–µ–Ω–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –º–µ–Ω—é
        await show_child_interface(message, current_child)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    available_children = db.get_available_children(message.from_user.id)
    
    if available_children:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ—Ç–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        await message.answer(
            "üëã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫ –Ω–æ–≤—ã–π:",
            reply_markup=get_children_selection_keyboard(available_children)
        )
        await state.set_state(LoginState.waiting_for_child_selection)
        return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–µ–π, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")
    await state.set_state(LoginState.waiting_for_password)

@router.message(LoginState.waiting_for_child_selection)
async def process_child_selection(message: types.Message, state: FSMContext):
    selected_child = message.text.strip()
    
    if selected_child == "‚ûï –ù–æ–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(LoginState.waiting_for_password)
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ
    db.set_current_child(message.from_user.id, selected_child)
    await show_child_interface(message, selected_child)
    await state.clear()

@router.message(LoginState.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    password = message.text.strip()
    
    if password == config.ADMIN_PASSWORD:
        # –†–æ–¥–∏—Ç–µ–ª—å
        db.add_user(message.from_user.id, message.from_user.username, 'parent')
        db.set_current_child(message.from_user.id, "parent")
        await message.answer("‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å!", reply_markup=get_logout_keyboard())
        await send_parent_menu(message)
        await state.clear()
    
    elif password in config.CHILD_PASSWORDS.values():
        # –†–µ–±–µ–Ω–æ–∫
        child_name = None
        for name, pwd in config.CHILD_PASSWORDS.items():
            if pwd == password:
                child_name = name
                break
        
        if child_name:
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram ID + –∏–º–µ–Ω–∏
            child_user_id = hash(f"{message.from_user.id}_{child_name}") % 1000000000
            
            db.add_user(child_user_id, f"{message.from_user.username}_{child_name}", 'child', child_name)
            db.set_current_child(message.from_user.id, child_name)
            
            await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {child_name.capitalize()}!", reply_markup=get_logout_keyboard())
            await show_child_interface(message, child_name)
            await state.clear()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

async def show_child_interface(message: types.Message, child_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞"""
    user_data = db.get_user_by_child_name(child_name)
    if user_data:
        stars = user_data[4]
        await message.answer(
            f"üë§ <b>{child_name.capitalize()}</b>\n‚≠ê –ó–≤–µ–∑–¥: <b>{stars}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_child_keyboard(),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

async def send_parent_menu(message: types.Message):
    await message.answer("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü–∞–Ω–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª—è:", reply_markup=get_main_parent_keyboard())

@router.message(Command("switch"))
async def cmd_switch(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    available_children = db.get_available_children(message.from_user.id)
    current_child = db.get_current_child(message.from_user.id)
    
    if not available_children:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.")
        return
    
    text = "üîÑ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
    if current_child:
        text += f"–¢–µ–∫—É—â–∏–π: <b>{current_child.capitalize()}</b>\n\n"
    
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
    
    await message.answer(
        text,
        reply_markup=get_children_selection_keyboard(available_children, current_child),
        parse_mode="HTML"
    )

@router.message(Command("logout"))
async def cmd_logout(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    db.set_current_child(message.from_user.id, None)
    await message.answer(
        "üëã –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()